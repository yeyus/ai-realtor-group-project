import csv
import os
from pandas import DataFrame
from pathlib import Path
from string import Template

# NOTE: Generated by ChatGPT - not sure if buggy
def append_or_skip_row(file_handler, reader, row_candidate):
    """
    Appends a new row to a CSV file if there isn't a row with matching values in the first three columns.
    
    :param file_handler: File handler of the CSV file opened in read-plus mode ('r+').
    :param new_row: List containing the new row to be appended.
    """
    
    # Read all existing rows into a list
    existing_rows = list(reader)
    
    row_candidate_str = csv_row_tpl.substitute(row_candidate)
    print(f"Row candidate str:\n {row_candidate_str}")
    
    # Check if a row with matching first three columns exists
    for row in existing_rows:
        if row[:3] == row_candidate_str[:3]:
            print("A row with matching first three columns already exists. Skipping append.")
            return
    
    # Move to the end of the file to append the new row
    file_handler.seek(0, 2)
    file_handler.write(row_candidate_str + "\n")
    
    print("New row appended successfully.")


# roughly organized as: address, features, properties (e.g. sqft), pricing info, surrounding info, metadata
# NOTE: This could possibly be missing data for the non-FOR_SALE listings
csv_fields = [
    "street",
    "unit",
    "city",
    "zip_code",
    "style",
    "beds",
    "stories",
    "full_baths",
    "half_baths",
    "parking_garage",
    "sqft",
    "year_built",
    "list_price",
    "hoa_fee",
    "sold_price",
    "nearby_schools",
    "property_url",
    "latitude",
    "longitude",
    "list_date",
    "last_sold_date",
]

def _get_csv_tpl():
    result = map(lambda x: str(f"${x}"), csv_fields)
    print(result)
    return ",".join(result)
    

csv_row_tpl = Template(
    # street, city, zip code, beds, stories, full baths, half baths, sqft, list price, sold price, nearby schools, property url, style, description, url
    _get_csv_tpl()
)


human_readable_row_tpl = Template("""
---
Property style: $style
Street: $street
City: $city
Zip Code: $zip_code
$beds beds
$stories stories
$full_baths full baths
$half_baths half baths
$sqft sqft
listed for $list_price
sold for $sold_price
nearby schools are $nearby_schools
listing url: $property_url

description: $text
---
""")


def expand_to_csv_row(property: DataFrame) -> str:
    ret = csv_row_tpl.substitute(property.to_dict())
    print(ret)
    return ret


def format_human_readable(property: DataFrame) -> str:
    return human_readable_row_tpl.substitute(property.to_dict())


def save_row_data(property: DataFrame, filename: str = "listings.csv") -> str:
    # todo: update path access to be cleaner
    data_base_dir_path = Path(os.getcwd(), "data")
    listings_csv_path = Path(data_base_dir_path, filename)
    listings_csv_path.touch()
    
    if not data_base_dir_path.exists():
        data_base_dir_path.mkdir()
    
    with open(listings_csv_path, mode='r+') as file_handler:
        file_handler.seek(0)  # Move to the start of the file
        
        reader = csv.reader(file_handler)
        
        append_or_skip_row(file_handler=file_handler, reader=reader, row_candidate=property)